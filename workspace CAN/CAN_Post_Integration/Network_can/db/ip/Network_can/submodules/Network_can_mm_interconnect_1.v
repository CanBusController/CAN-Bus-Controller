// Network_can_mm_interconnect_1.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2017.01.15.11:35:37

`timescale 1 ps / 1 ps
module Network_can_mm_interconnect_1 (
		input  wire        clk_1_clk_clk,                                    //                                  clk_1_clk.clk
		input  wire        nios2_qsys_1_reset_n_reset_bridge_in_reset_reset, // nios2_qsys_1_reset_n_reset_bridge_in_reset.reset
		input  wire [13:0] nios2_qsys_1_data_master_address,                 //                   nios2_qsys_1_data_master.address
		output wire        nios2_qsys_1_data_master_waitrequest,             //                                           .waitrequest
		input  wire [3:0]  nios2_qsys_1_data_master_byteenable,              //                                           .byteenable
		input  wire        nios2_qsys_1_data_master_read,                    //                                           .read
		output wire [31:0] nios2_qsys_1_data_master_readdata,                //                                           .readdata
		input  wire        nios2_qsys_1_data_master_write,                   //                                           .write
		input  wire [31:0] nios2_qsys_1_data_master_writedata,               //                                           .writedata
		input  wire        nios2_qsys_1_data_master_debugaccess,             //                                           .debugaccess
		input  wire [13:0] nios2_qsys_1_instruction_master_address,          //            nios2_qsys_1_instruction_master.address
		output wire        nios2_qsys_1_instruction_master_waitrequest,      //                                           .waitrequest
		input  wire        nios2_qsys_1_instruction_master_read,             //                                           .read
		output wire [31:0] nios2_qsys_1_instruction_master_readdata,         //                                           .readdata
		output wire [5:0]  Can_controller_1_avalon_slave_0_address,          //            Can_controller_1_avalon_slave_0.address
		output wire        Can_controller_1_avalon_slave_0_write,            //                                           .write
		output wire        Can_controller_1_avalon_slave_0_read,             //                                           .read
		input  wire [15:0] Can_controller_1_avalon_slave_0_readdata,         //                                           .readdata
		output wire [15:0] Can_controller_1_avalon_slave_0_writedata,        //                                           .writedata
		output wire [8:0]  nios2_qsys_1_jtag_debug_module_address,           //             nios2_qsys_1_jtag_debug_module.address
		output wire        nios2_qsys_1_jtag_debug_module_write,             //                                           .write
		output wire        nios2_qsys_1_jtag_debug_module_read,              //                                           .read
		input  wire [31:0] nios2_qsys_1_jtag_debug_module_readdata,          //                                           .readdata
		output wire [31:0] nios2_qsys_1_jtag_debug_module_writedata,         //                                           .writedata
		output wire [3:0]  nios2_qsys_1_jtag_debug_module_byteenable,        //                                           .byteenable
		input  wire        nios2_qsys_1_jtag_debug_module_waitrequest,       //                                           .waitrequest
		output wire        nios2_qsys_1_jtag_debug_module_debugaccess,       //                                           .debugaccess
		output wire [10:0] onchip_memory2_1_s1_address,                      //                        onchip_memory2_1_s1.address
		output wire        onchip_memory2_1_s1_write,                        //                                           .write
		input  wire [15:0] onchip_memory2_1_s1_readdata,                     //                                           .readdata
		output wire [15:0] onchip_memory2_1_s1_writedata,                    //                                           .writedata
		output wire [1:0]  onchip_memory2_1_s1_byteenable,                   //                                           .byteenable
		output wire        onchip_memory2_1_s1_chipselect,                   //                                           .chipselect
		output wire        onchip_memory2_1_s1_clken                         //                                           .clken
	);

	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_waitrequest;                     // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_waitrequest -> nios2_qsys_1_instruction_master_translator:uav_waitrequest
	wire   [2:0] nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_burstcount;                      // nios2_qsys_1_instruction_master_translator:uav_burstcount -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_writedata;                       // nios2_qsys_1_instruction_master_translator:uav_writedata -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [13:0] nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_address;                         // nios2_qsys_1_instruction_master_translator:uav_address -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_address
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_lock;                            // nios2_qsys_1_instruction_master_translator:uav_lock -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_lock
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_write;                           // nios2_qsys_1_instruction_master_translator:uav_write -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_write
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_read;                            // nios2_qsys_1_instruction_master_translator:uav_read -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_readdata;                        // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_readdata -> nios2_qsys_1_instruction_master_translator:uav_readdata
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_debugaccess;                     // nios2_qsys_1_instruction_master_translator:uav_debugaccess -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_byteenable;                      // nios2_qsys_1_instruction_master_translator:uav_byteenable -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_readdatavalid;                   // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> nios2_qsys_1_instruction_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_src_endofpacket;                                                                         // rsp_xbar_mux:src_endofpacket -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_src_valid;                                                                               // rsp_xbar_mux:src_valid -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_src_startofpacket;                                                                       // rsp_xbar_mux:src_startofpacket -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [87:0] rsp_xbar_mux_src_data;                                                                                // rsp_xbar_mux:src_data -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [2:0] rsp_xbar_mux_src_channel;                                                                             // rsp_xbar_mux:src_channel -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_src_ready;                                                                               // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_waitrequest;                            // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_waitrequest -> nios2_qsys_1_data_master_translator:uav_waitrequest
	wire   [2:0] nios2_qsys_1_data_master_translator_avalon_universal_master_0_burstcount;                             // nios2_qsys_1_data_master_translator:uav_burstcount -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] nios2_qsys_1_data_master_translator_avalon_universal_master_0_writedata;                              // nios2_qsys_1_data_master_translator:uav_writedata -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [13:0] nios2_qsys_1_data_master_translator_avalon_universal_master_0_address;                                // nios2_qsys_1_data_master_translator:uav_address -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_address
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_lock;                                   // nios2_qsys_1_data_master_translator:uav_lock -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_lock
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_write;                                  // nios2_qsys_1_data_master_translator:uav_write -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_write
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_read;                                   // nios2_qsys_1_data_master_translator:uav_read -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] nios2_qsys_1_data_master_translator_avalon_universal_master_0_readdata;                               // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_readdata -> nios2_qsys_1_data_master_translator:uav_readdata
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_debugaccess;                            // nios2_qsys_1_data_master_translator:uav_debugaccess -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] nios2_qsys_1_data_master_translator_avalon_universal_master_0_byteenable;                             // nios2_qsys_1_data_master_translator:uav_byteenable -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_readdatavalid;                          // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> nios2_qsys_1_data_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_001_src_endofpacket;                                                                     // rsp_xbar_mux_001:src_endofpacket -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_001_src_valid;                                                                           // rsp_xbar_mux_001:src_valid -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_001_src_startofpacket;                                                                   // rsp_xbar_mux_001:src_startofpacket -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [87:0] rsp_xbar_mux_001_src_data;                                                                            // rsp_xbar_mux_001:src_data -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [2:0] rsp_xbar_mux_001_src_channel;                                                                         // rsp_xbar_mux_001:src_channel -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_001_src_ready;                                                                           // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest;              // nios2_qsys_1_jtag_debug_module_translator:uav_waitrequest -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount;               // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_burstcount -> nios2_qsys_1_jtag_debug_module_translator:uav_burstcount
	wire  [31:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata;                // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_writedata -> nios2_qsys_1_jtag_debug_module_translator:uav_writedata
	wire  [13:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address;                  // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_address -> nios2_qsys_1_jtag_debug_module_translator:uav_address
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write;                    // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_write -> nios2_qsys_1_jtag_debug_module_translator:uav_write
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock;                     // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_lock -> nios2_qsys_1_jtag_debug_module_translator:uav_lock
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read;                     // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_read -> nios2_qsys_1_jtag_debug_module_translator:uav_read
	wire  [31:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata;                 // nios2_qsys_1_jtag_debug_module_translator:uav_readdata -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid;            // nios2_qsys_1_jtag_debug_module_translator:uav_readdatavalid -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess;              // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_debugaccess -> nios2_qsys_1_jtag_debug_module_translator:uav_debugaccess
	wire   [3:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable;               // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_byteenable -> nios2_qsys_1_jtag_debug_module_translator:uav_byteenable
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;       // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid;             // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_valid -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;     // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [88:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data;              // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_data -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready;             // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;    // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;          // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;  // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [88:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;           // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;          // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_ready -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;        // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;         // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;        // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_src_endofpacket;                                                                         // cmd_xbar_mux:src_endofpacket -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_src_valid;                                                                               // cmd_xbar_mux:src_valid -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_src_startofpacket;                                                                       // cmd_xbar_mux:src_startofpacket -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [87:0] cmd_xbar_mux_src_data;                                                                                // cmd_xbar_mux:src_data -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_data
	wire   [2:0] cmd_xbar_mux_src_channel;                                                                             // cmd_xbar_mux:src_channel -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_src_ready;                                                                               // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux:src_ready
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                         // onchip_memory2_1_s1_translator:uav_waitrequest -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [1:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                          // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> onchip_memory2_1_s1_translator:uav_burstcount
	wire  [15:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                           // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> onchip_memory2_1_s1_translator:uav_writedata
	wire  [13:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_address;                             // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_address -> onchip_memory2_1_s1_translator:uav_address
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_write;                               // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_write -> onchip_memory2_1_s1_translator:uav_write
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_lock -> onchip_memory2_1_s1_translator:uav_lock
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_read;                                // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_read -> onchip_memory2_1_s1_translator:uav_read
	wire  [15:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                            // onchip_memory2_1_s1_translator:uav_readdata -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                       // onchip_memory2_1_s1_translator:uav_readdatavalid -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                         // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> onchip_memory2_1_s1_translator:uav_debugaccess
	wire   [1:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                          // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> onchip_memory2_1_s1_translator:uav_byteenable
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                  // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                        // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [70:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                         // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                        // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;               // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                     // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;             // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [70:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                      // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                     // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                   // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [17:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                    // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                   // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // Can_controller_1_avalon_slave_0_translator:uav_waitrequest -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [1:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount;              // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_burstcount -> Can_controller_1_avalon_slave_0_translator:uav_burstcount
	wire  [15:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata;               // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_writedata -> Can_controller_1_avalon_slave_0_translator:uav_writedata
	wire  [13:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address;                 // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_address -> Can_controller_1_avalon_slave_0_translator:uav_address
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write;                   // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_write -> Can_controller_1_avalon_slave_0_translator:uav_write
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock;                    // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_lock -> Can_controller_1_avalon_slave_0_translator:uav_lock
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read;                    // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_read -> Can_controller_1_avalon_slave_0_translator:uav_read
	wire  [15:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata;                // Can_controller_1_avalon_slave_0_translator:uav_readdata -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // Can_controller_1_avalon_slave_0_translator:uav_readdatavalid -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> Can_controller_1_avalon_slave_0_translator:uav_debugaccess
	wire   [1:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable;              // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_byteenable -> Can_controller_1_avalon_slave_0_translator:uav_byteenable
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid;            // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_valid -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [70:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data;             // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_data -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready;            // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [70:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [17:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket;            // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_valid;                  // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket;          // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [87:0] nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_data;                   // nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire         nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_ready;                  // addr_router:sink_ready -> nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_src_endofpacket;                                                                          // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire         addr_router_src_valid;                                                                                // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire         addr_router_src_startofpacket;                                                                        // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [87:0] addr_router_src_data;                                                                                 // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire   [2:0] addr_router_src_channel;                                                                              // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire         addr_router_src_ready;                                                                                // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                   // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_valid;                         // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                 // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [87:0] nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_data;                          // nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire         nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_ready;                         // addr_router_001:sink_ready -> nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_001_src_endofpacket;                                                                      // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire         addr_router_001_src_valid;                                                                            // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire         addr_router_001_src_startofpacket;                                                                    // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [87:0] addr_router_001_src_data;                                                                             // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire   [2:0] addr_router_001_src_channel;                                                                          // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire         addr_router_001_src_ready;                                                                            // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket;              // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid;                    // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket;            // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [87:0] nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data;                     // nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire         nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready;                    // id_router:sink_ready -> nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_src_endofpacket;                                                                            // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire         id_router_src_valid;                                                                                  // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire         id_router_src_startofpacket;                                                                          // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [87:0] id_router_src_data;                                                                                   // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [2:0] id_router_src_channel;                                                                                // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire         id_router_src_ready;                                                                                  // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                         // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_valid;                               // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                       // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [69:0] onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_data;                                // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire         onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_ready;                               // id_router_001:sink_ready -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid;                   // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [69:0] can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data;                    // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire         can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_002:sink_ready -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_ready
	wire         burst_adapter_source0_endofpacket;                                                                    // burst_adapter:source0_endofpacket -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_source0_valid;                                                                          // burst_adapter:source0_valid -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_source0_startofpacket;                                                                  // burst_adapter:source0_startofpacket -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [69:0] burst_adapter_source0_data;                                                                           // burst_adapter:source0_data -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_source0_ready;                                                                          // onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [2:0] burst_adapter_source0_channel;                                                                        // burst_adapter:source0_channel -> onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire         burst_adapter_001_source0_endofpacket;                                                                // burst_adapter_001:source0_endofpacket -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_001_source0_valid;                                                                      // burst_adapter_001:source0_valid -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_001_source0_startofpacket;                                                              // burst_adapter_001:source0_startofpacket -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [69:0] burst_adapter_001_source0_data;                                                                       // burst_adapter_001:source0_data -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_001_source0_ready;                                                                      // Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire   [2:0] burst_adapter_001_source0_channel;                                                                    // burst_adapter_001:source0_channel -> Can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_demux_src0_endofpacket;                                                                      // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire         cmd_xbar_demux_src0_valid;                                                                            // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire         cmd_xbar_demux_src0_startofpacket;                                                                    // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [87:0] cmd_xbar_demux_src0_data;                                                                             // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [2:0] cmd_xbar_demux_src0_channel;                                                                          // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire         cmd_xbar_demux_src0_ready;                                                                            // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire         cmd_xbar_demux_src1_endofpacket;                                                                      // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire         cmd_xbar_demux_src1_valid;                                                                            // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire         cmd_xbar_demux_src1_startofpacket;                                                                    // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [87:0] cmd_xbar_demux_src1_data;                                                                             // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [2:0] cmd_xbar_demux_src1_channel;                                                                          // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire         cmd_xbar_demux_src1_ready;                                                                            // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire         cmd_xbar_demux_001_src0_endofpacket;                                                                  // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire         cmd_xbar_demux_001_src0_valid;                                                                        // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire         cmd_xbar_demux_001_src0_startofpacket;                                                                // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [87:0] cmd_xbar_demux_001_src0_data;                                                                         // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [2:0] cmd_xbar_demux_001_src0_channel;                                                                      // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire         cmd_xbar_demux_001_src0_ready;                                                                        // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire         cmd_xbar_demux_001_src1_endofpacket;                                                                  // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire         cmd_xbar_demux_001_src1_valid;                                                                        // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire         cmd_xbar_demux_001_src1_startofpacket;                                                                // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [87:0] cmd_xbar_demux_001_src1_data;                                                                         // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [2:0] cmd_xbar_demux_001_src1_channel;                                                                      // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire         cmd_xbar_demux_001_src1_ready;                                                                        // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire         cmd_xbar_demux_001_src2_endofpacket;                                                                  // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire         cmd_xbar_demux_001_src2_valid;                                                                        // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire         cmd_xbar_demux_001_src2_startofpacket;                                                                // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [87:0] cmd_xbar_demux_001_src2_data;                                                                         // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [2:0] cmd_xbar_demux_001_src2_channel;                                                                      // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire         cmd_xbar_demux_001_src2_ready;                                                                        // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux_001:src2_ready
	wire         rsp_xbar_demux_src0_endofpacket;                                                                      // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire         rsp_xbar_demux_src0_valid;                                                                            // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire         rsp_xbar_demux_src0_startofpacket;                                                                    // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [87:0] rsp_xbar_demux_src0_data;                                                                             // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [2:0] rsp_xbar_demux_src0_channel;                                                                          // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire         rsp_xbar_demux_src0_ready;                                                                            // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire         rsp_xbar_demux_src1_endofpacket;                                                                      // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire         rsp_xbar_demux_src1_valid;                                                                            // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire         rsp_xbar_demux_src1_startofpacket;                                                                    // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [87:0] rsp_xbar_demux_src1_data;                                                                             // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [2:0] rsp_xbar_demux_src1_channel;                                                                          // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire         rsp_xbar_demux_src1_ready;                                                                            // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire         rsp_xbar_demux_001_src0_endofpacket;                                                                  // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire         rsp_xbar_demux_001_src0_valid;                                                                        // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire         rsp_xbar_demux_001_src0_startofpacket;                                                                // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [87:0] rsp_xbar_demux_001_src0_data;                                                                         // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [2:0] rsp_xbar_demux_001_src0_channel;                                                                      // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire         rsp_xbar_demux_001_src0_ready;                                                                        // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire         rsp_xbar_demux_001_src1_endofpacket;                                                                  // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire         rsp_xbar_demux_001_src1_valid;                                                                        // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire         rsp_xbar_demux_001_src1_startofpacket;                                                                // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [87:0] rsp_xbar_demux_001_src1_data;                                                                         // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [2:0] rsp_xbar_demux_001_src1_channel;                                                                      // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire         rsp_xbar_demux_001_src1_ready;                                                                        // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire         rsp_xbar_demux_002_src0_endofpacket;                                                                  // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire         rsp_xbar_demux_002_src0_valid;                                                                        // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux_001:sink2_valid
	wire         rsp_xbar_demux_002_src0_startofpacket;                                                                // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [87:0] rsp_xbar_demux_002_src0_data;                                                                         // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux_001:sink2_data
	wire   [2:0] rsp_xbar_demux_002_src0_channel;                                                                      // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux_001:sink2_channel
	wire         rsp_xbar_demux_002_src0_ready;                                                                        // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire         id_router_001_src_endofpacket;                                                                        // id_router_001:src_endofpacket -> width_adapter:in_endofpacket
	wire         id_router_001_src_valid;                                                                              // id_router_001:src_valid -> width_adapter:in_valid
	wire         id_router_001_src_startofpacket;                                                                      // id_router_001:src_startofpacket -> width_adapter:in_startofpacket
	wire  [69:0] id_router_001_src_data;                                                                               // id_router_001:src_data -> width_adapter:in_data
	wire   [2:0] id_router_001_src_channel;                                                                            // id_router_001:src_channel -> width_adapter:in_channel
	wire         id_router_001_src_ready;                                                                              // width_adapter:in_ready -> id_router_001:src_ready
	wire         width_adapter_src_endofpacket;                                                                        // width_adapter:out_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire         width_adapter_src_valid;                                                                              // width_adapter:out_valid -> rsp_xbar_demux_001:sink_valid
	wire         width_adapter_src_startofpacket;                                                                      // width_adapter:out_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [87:0] width_adapter_src_data;                                                                               // width_adapter:out_data -> rsp_xbar_demux_001:sink_data
	wire         width_adapter_src_ready;                                                                              // rsp_xbar_demux_001:sink_ready -> width_adapter:out_ready
	wire   [2:0] width_adapter_src_channel;                                                                            // width_adapter:out_channel -> rsp_xbar_demux_001:sink_channel
	wire         id_router_002_src_endofpacket;                                                                        // id_router_002:src_endofpacket -> width_adapter_001:in_endofpacket
	wire         id_router_002_src_valid;                                                                              // id_router_002:src_valid -> width_adapter_001:in_valid
	wire         id_router_002_src_startofpacket;                                                                      // id_router_002:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [69:0] id_router_002_src_data;                                                                               // id_router_002:src_data -> width_adapter_001:in_data
	wire   [2:0] id_router_002_src_channel;                                                                            // id_router_002:src_channel -> width_adapter_001:in_channel
	wire         id_router_002_src_ready;                                                                              // width_adapter_001:in_ready -> id_router_002:src_ready
	wire         width_adapter_001_src_endofpacket;                                                                    // width_adapter_001:out_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire         width_adapter_001_src_valid;                                                                          // width_adapter_001:out_valid -> rsp_xbar_demux_002:sink_valid
	wire         width_adapter_001_src_startofpacket;                                                                  // width_adapter_001:out_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [87:0] width_adapter_001_src_data;                                                                           // width_adapter_001:out_data -> rsp_xbar_demux_002:sink_data
	wire         width_adapter_001_src_ready;                                                                          // rsp_xbar_demux_002:sink_ready -> width_adapter_001:out_ready
	wire   [2:0] width_adapter_001_src_channel;                                                                        // width_adapter_001:out_channel -> rsp_xbar_demux_002:sink_channel
	wire         cmd_xbar_mux_001_src_endofpacket;                                                                     // cmd_xbar_mux_001:src_endofpacket -> width_adapter_002:in_endofpacket
	wire         cmd_xbar_mux_001_src_valid;                                                                           // cmd_xbar_mux_001:src_valid -> width_adapter_002:in_valid
	wire         cmd_xbar_mux_001_src_startofpacket;                                                                   // cmd_xbar_mux_001:src_startofpacket -> width_adapter_002:in_startofpacket
	wire  [87:0] cmd_xbar_mux_001_src_data;                                                                            // cmd_xbar_mux_001:src_data -> width_adapter_002:in_data
	wire   [2:0] cmd_xbar_mux_001_src_channel;                                                                         // cmd_xbar_mux_001:src_channel -> width_adapter_002:in_channel
	wire         cmd_xbar_mux_001_src_ready;                                                                           // width_adapter_002:in_ready -> cmd_xbar_mux_001:src_ready
	wire         width_adapter_002_src_endofpacket;                                                                    // width_adapter_002:out_endofpacket -> burst_adapter:sink0_endofpacket
	wire         width_adapter_002_src_valid;                                                                          // width_adapter_002:out_valid -> burst_adapter:sink0_valid
	wire         width_adapter_002_src_startofpacket;                                                                  // width_adapter_002:out_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [69:0] width_adapter_002_src_data;                                                                           // width_adapter_002:out_data -> burst_adapter:sink0_data
	wire         width_adapter_002_src_ready;                                                                          // burst_adapter:sink0_ready -> width_adapter_002:out_ready
	wire   [2:0] width_adapter_002_src_channel;                                                                        // width_adapter_002:out_channel -> burst_adapter:sink0_channel
	wire         cmd_xbar_mux_002_src_endofpacket;                                                                     // cmd_xbar_mux_002:src_endofpacket -> width_adapter_003:in_endofpacket
	wire         cmd_xbar_mux_002_src_valid;                                                                           // cmd_xbar_mux_002:src_valid -> width_adapter_003:in_valid
	wire         cmd_xbar_mux_002_src_startofpacket;                                                                   // cmd_xbar_mux_002:src_startofpacket -> width_adapter_003:in_startofpacket
	wire  [87:0] cmd_xbar_mux_002_src_data;                                                                            // cmd_xbar_mux_002:src_data -> width_adapter_003:in_data
	wire   [2:0] cmd_xbar_mux_002_src_channel;                                                                         // cmd_xbar_mux_002:src_channel -> width_adapter_003:in_channel
	wire         cmd_xbar_mux_002_src_ready;                                                                           // width_adapter_003:in_ready -> cmd_xbar_mux_002:src_ready
	wire         width_adapter_003_src_endofpacket;                                                                    // width_adapter_003:out_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire         width_adapter_003_src_valid;                                                                          // width_adapter_003:out_valid -> burst_adapter_001:sink0_valid
	wire         width_adapter_003_src_startofpacket;                                                                  // width_adapter_003:out_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [69:0] width_adapter_003_src_data;                                                                           // width_adapter_003:out_data -> burst_adapter_001:sink0_data
	wire         width_adapter_003_src_ready;                                                                          // burst_adapter_001:sink0_ready -> width_adapter_003:out_ready
	wire   [2:0] width_adapter_003_src_channel;                                                                        // width_adapter_003:out_channel -> burst_adapter_001:sink0_channel

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_1_instruction_master_translator (
		.clk                      (clk_1_clk_clk),                                                                      //                       clk.clk
		.reset                    (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_qsys_1_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_qsys_1_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios2_qsys_1_instruction_master_read),                                               //                          .read
		.av_readdata              (nios2_qsys_1_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount            (1'b1),                                                                               //               (terminated)
		.av_byteenable            (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                                               //               (terminated)
		.av_readdatavalid         (),                                                                                   //               (terminated)
		.av_write                 (1'b0),                                                                               //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                  (1'b0),                                                                               //               (terminated)
		.av_debugaccess           (1'b0),                                                                               //               (terminated)
		.uav_clken                (),                                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                                               //               (terminated)
		.uav_response             (2'b00),                                                                              //               (terminated)
		.av_response              (),                                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_qsys_1_data_master_translator (
		.clk                      (clk_1_clk_clk),                                                               //                       clk.clk
		.reset                    (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios2_qsys_1_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios2_qsys_1_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios2_qsys_1_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios2_qsys_1_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios2_qsys_1_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios2_qsys_1_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios2_qsys_1_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios2_qsys_1_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios2_qsys_1_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios2_qsys_1_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios2_qsys_1_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios2_qsys_1_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios2_qsys_1_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios2_qsys_1_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios2_qsys_1_data_master_read),                                               //                          .read
		.av_readdata              (nios2_qsys_1_data_master_readdata),                                           //                          .readdata
		.av_write                 (nios2_qsys_1_data_master_write),                                              //                          .write
		.av_writedata             (nios2_qsys_1_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios2_qsys_1_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_readdatavalid         (),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_1_jtag_debug_module_translator (
		.clk                      (clk_1_clk_clk),                                                                             //                      clk.clk
		.reset                    (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                          //                    reset.reset
		.uav_address              (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios2_qsys_1_jtag_debug_module_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (nios2_qsys_1_jtag_debug_module_write),                                                      //                         .write
		.av_read                  (nios2_qsys_1_jtag_debug_module_read),                                                       //                         .read
		.av_readdata              (nios2_qsys_1_jtag_debug_module_readdata),                                                   //                         .readdata
		.av_writedata             (nios2_qsys_1_jtag_debug_module_writedata),                                                  //                         .writedata
		.av_byteenable            (nios2_qsys_1_jtag_debug_module_byteenable),                                                 //                         .byteenable
		.av_waitrequest           (nios2_qsys_1_jtag_debug_module_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (nios2_qsys_1_jtag_debug_module_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                                          //              (terminated)
		.av_burstcount            (),                                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                                          //              (terminated)
		.av_lock                  (),                                                                                          //              (terminated)
		.av_chipselect            (),                                                                                          //              (terminated)
		.av_clken                 (),                                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                                      //              (terminated)
		.av_outputenable          (),                                                                                          //              (terminated)
		.uav_response             (),                                                                                          //              (terminated)
		.av_response              (2'b00),                                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_1_s1_translator (
		.clk                      (clk_1_clk_clk),                                                                  //                      clk.clk
		.reset                    (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (onchip_memory2_1_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (onchip_memory2_1_s1_write),                                                      //                         .write
		.av_readdata              (onchip_memory2_1_s1_readdata),                                                   //                         .readdata
		.av_writedata             (onchip_memory2_1_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (onchip_memory2_1_s1_byteenable),                                                 //                         .byteenable
		.av_chipselect            (onchip_memory2_1_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (onchip_memory2_1_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                               //              (terminated)
		.av_begintransfer         (),                                                                               //              (terminated)
		.av_beginbursttransfer    (),                                                                               //              (terminated)
		.av_burstcount            (),                                                                               //              (terminated)
		.av_readdatavalid         (1'b0),                                                                           //              (terminated)
		.av_waitrequest           (1'b0),                                                                           //              (terminated)
		.av_writebyteenable       (),                                                                               //              (terminated)
		.av_lock                  (),                                                                               //              (terminated)
		.uav_clken                (1'b0),                                                                           //              (terminated)
		.av_debugaccess           (),                                                                               //              (terminated)
		.av_outputenable          (),                                                                               //              (terminated)
		.uav_response             (),                                                                               //              (terminated)
		.av_response              (2'b00),                                                                          //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                           //              (terminated)
		.uav_writeresponsevalid   (),                                                                               //              (terminated)
		.av_writeresponserequest  (),                                                                               //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) can_controller_1_avalon_slave_0_translator (
		.clk                      (clk_1_clk_clk),                                                                              //                      clk.clk
		.reset                    (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                           //                    reset.reset
		.uav_address              (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (Can_controller_1_avalon_slave_0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (Can_controller_1_avalon_slave_0_write),                                                      //                         .write
		.av_read                  (Can_controller_1_avalon_slave_0_read),                                                       //                         .read
		.av_readdata              (Can_controller_1_avalon_slave_0_readdata),                                                   //                         .readdata
		.av_writedata             (Can_controller_1_avalon_slave_0_writedata),                                                  //                         .writedata
		.av_begintransfer         (),                                                                                           //              (terminated)
		.av_beginbursttransfer    (),                                                                                           //              (terminated)
		.av_burstcount            (),                                                                                           //              (terminated)
		.av_byteenable            (),                                                                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                       //              (terminated)
		.av_waitrequest           (1'b0),                                                                                       //              (terminated)
		.av_writebyteenable       (),                                                                                           //              (terminated)
		.av_lock                  (),                                                                                           //              (terminated)
		.av_chipselect            (),                                                                                           //              (terminated)
		.av_clken                 (),                                                                                           //              (terminated)
		.uav_clken                (1'b0),                                                                                       //              (terminated)
		.av_debugaccess           (),                                                                                           //              (terminated)
		.av_outputenable          (),                                                                                           //              (terminated)
		.uav_response             (),                                                                                           //              (terminated)
		.av_response              (2'b00),                                                                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                       //              (terminated)
		.uav_writeresponsevalid   (),                                                                                           //              (terminated)
		.av_writeresponserequest  (),                                                                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BEGIN_BURST           (69),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (73),
		.PKT_THREAD_ID_H           (75),
		.PKT_THREAD_ID_L           (75),
		.PKT_CACHE_H               (82),
		.PKT_CACHE_L               (79),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_ORI_BURST_SIZE_H      (87),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_1_clk_clk),                                                                               //       clk.clk
		.reset                   (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                                      //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                                       //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                                    //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                                              //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                                //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                                      //          .ready
		.av_response             (),                                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BEGIN_BURST           (69),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (73),
		.PKT_THREAD_ID_H           (75),
		.PKT_THREAD_ID_L           (75),
		.PKT_CACHE_H               (82),
		.PKT_CACHE_L               (79),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_ORI_BURST_SIZE_H      (87),
		.ST_DATA_W                 (88),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_1_clk_clk),                                                                        //       clk.clk
		.reset                   (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address              (nios2_qsys_1_data_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (nios2_qsys_1_data_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (nios2_qsys_1_data_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (nios2_qsys_1_data_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (nios2_qsys_1_data_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (nios2_qsys_1_data_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (nios2_qsys_1_data_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (nios2_qsys_1_data_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (nios2_qsys_1_data_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (nios2_qsys_1_data_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (nios2_qsys_1_data_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                           //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                            //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                                         //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                                     //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                           //          .ready
		.av_response             (),                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (69),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_ORI_BURST_SIZE_H      (87),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (88),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_1_clk_clk),                                                                                       //             clk.clk
		.reset                   (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_src_ready),                                                                              //              cp.ready
		.cp_valid                (cmd_xbar_mux_src_valid),                                                                              //                .valid
		.cp_data                 (cmd_xbar_mux_src_data),                                                                               //                .data
		.cp_startofpacket        (cmd_xbar_mux_src_startofpacket),                                                                      //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_src_endofpacket),                                                                        //                .endofpacket
		.cp_channel              (cmd_xbar_mux_src_channel),                                                                            //                .channel
		.rf_sink_ready           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (89),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                                                                       //       clk.clk
		.reset             (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_data           (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                                // (terminated)
		.csr_readdata      (),                                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                // (terminated)
		.almost_full_data  (),                                                                                                    // (terminated)
		.almost_empty_data (),                                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                                // (terminated)
		.out_empty         (),                                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                                // (terminated)
		.out_error         (),                                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                                // (terminated)
		.out_channel       ()                                                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (51),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (31),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (32),
		.PKT_TRANS_POSTED          (33),
		.PKT_TRANS_WRITE           (34),
		.PKT_TRANS_READ            (35),
		.PKT_TRANS_LOCK            (36),
		.PKT_SRC_ID_H              (54),
		.PKT_SRC_ID_L              (53),
		.PKT_DEST_ID_H             (56),
		.PKT_DEST_ID_L             (55),
		.PKT_BURSTWRAP_H           (43),
		.PKT_BURSTWRAP_L           (41),
		.PKT_BYTE_CNT_H            (40),
		.PKT_BYTE_CNT_L            (38),
		.PKT_PROTECTION_H          (60),
		.PKT_PROTECTION_L          (58),
		.PKT_RESPONSE_STATUS_H     (66),
		.PKT_RESPONSE_STATUS_L     (65),
		.PKT_BURST_SIZE_H          (46),
		.PKT_BURST_SIZE_L          (44),
		.PKT_ORI_BURST_SIZE_L      (67),
		.PKT_ORI_BURST_SIZE_H      (69),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (70),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_1_clk_clk),                                                                            //             clk.clk
		.reset                   (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                              //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                              //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                               //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                        //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                            //                .channel
		.rf_sink_ready           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                    //     (terminated)
		.m0_writeresponserequest (),                                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (71),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                                                            //       clk.clk
		.reset             (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                    // (terminated)
		.csr_read          (1'b0),                                                                                     // (terminated)
		.csr_write         (1'b0),                                                                                     // (terminated)
		.csr_readdata      (),                                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                     // (terminated)
		.almost_full_data  (),                                                                                         // (terminated)
		.almost_empty_data (),                                                                                         // (terminated)
		.in_empty          (1'b0),                                                                                     // (terminated)
		.out_empty         (),                                                                                         // (terminated)
		.in_error          (1'b0),                                                                                     // (terminated)
		.out_error         (),                                                                                         // (terminated)
		.in_channel        (1'b0),                                                                                     // (terminated)
		.out_channel       ()                                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (51),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (31),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (32),
		.PKT_TRANS_POSTED          (33),
		.PKT_TRANS_WRITE           (34),
		.PKT_TRANS_READ            (35),
		.PKT_TRANS_LOCK            (36),
		.PKT_SRC_ID_H              (54),
		.PKT_SRC_ID_L              (53),
		.PKT_DEST_ID_H             (56),
		.PKT_DEST_ID_L             (55),
		.PKT_BURSTWRAP_H           (43),
		.PKT_BURSTWRAP_L           (41),
		.PKT_BYTE_CNT_H            (40),
		.PKT_BYTE_CNT_L            (38),
		.PKT_PROTECTION_H          (60),
		.PKT_PROTECTION_L          (58),
		.PKT_RESPONSE_STATUS_H     (66),
		.PKT_RESPONSE_STATUS_L     (65),
		.PKT_BURST_SIZE_H          (46),
		.PKT_BURST_SIZE_L          (44),
		.PKT_ORI_BURST_SIZE_L      (67),
		.PKT_ORI_BURST_SIZE_H      (69),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (70),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_1_clk_clk),                                                                                        //             clk.clk
		.reset                   (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                                     //       clk_reset.reset
		.m0_address              (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                      //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                      //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                       //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                              //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                                //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                    //                .channel
		.rf_sink_ready           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                                //     (terminated)
		.m0_writeresponserequest (),                                                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (71),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_1_clk_clk),                                                                                        //       clk.clk
		.reset             (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                                     // clk_reset.reset
		.in_data           (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                                 // (terminated)
		.csr_readdata      (),                                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                 // (terminated)
		.almost_full_data  (),                                                                                                     // (terminated)
		.almost_empty_data (),                                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                                 // (terminated)
		.out_empty         (),                                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                                 // (terminated)
		.out_error         (),                                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                                 // (terminated)
		.out_channel       ()                                                                                                      // (terminated)
	);

	Network_can_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_1_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                                                               //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                       //       src.ready
		.src_valid          (addr_router_src_valid),                                                                       //          .valid
		.src_data           (addr_router_src_data),                                                                        //          .data
		.src_channel        (addr_router_src_channel),                                                                     //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                               //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                                  //          .endofpacket
	);

	Network_can_mm_interconnect_0_addr_router_001 addr_router_001 (
		.sink_ready         (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_1_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                                                        //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                            //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                            //          .valid
		.src_data           (addr_router_001_src_data),                                                             //          .data
		.src_channel        (addr_router_001_src_channel),                                                          //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                       //          .endofpacket
	);

	Network_can_mm_interconnect_0_id_router id_router (
		.sink_ready         (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_1_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                                                             //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                                       //       src.ready
		.src_valid          (id_router_src_valid),                                                                       //          .valid
		.src_data           (id_router_src_data),                                                                        //          .data
		.src_channel        (id_router_src_channel),                                                                     //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                               //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                                  //          .endofpacket
	);

	Network_can_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                                                  //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                        //       src.ready
		.src_valid          (id_router_001_src_valid),                                                        //          .valid
		.src_data           (id_router_001_src_data),                                                         //          .data
		.src_channel        (id_router_001_src_channel),                                                      //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                   //          .endofpacket
	);

	Network_can_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (can_controller_1_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_1_clk_clk),                                                                              //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                                    //       src.ready
		.src_valid          (id_router_002_src_valid),                                                                    //          .valid
		.src_data           (id_router_002_src_data),                                                                     //          .data
		.src_channel        (id_router_002_src_channel),                                                                  //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (31),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (51),
		.PKT_BYTE_CNT_H            (40),
		.PKT_BYTE_CNT_L            (38),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (46),
		.PKT_BURST_SIZE_L          (44),
		.PKT_BURST_TYPE_H          (48),
		.PKT_BURST_TYPE_L          (47),
		.PKT_BURSTWRAP_H           (43),
		.PKT_BURSTWRAP_L           (41),
		.PKT_TRANS_COMPRESSED_READ (32),
		.PKT_TRANS_WRITE           (34),
		.PKT_TRANS_READ            (35),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (70),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (39),
		.OUT_BURSTWRAP_H           (43),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3)
	) burst_adapter (
		.clk                   (clk_1_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_002_src_valid),                      //     sink0.valid
		.sink0_data            (width_adapter_002_src_data),                       //          .data
		.sink0_channel         (width_adapter_002_src_channel),                    //          .channel
		.sink0_startofpacket   (width_adapter_002_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (width_adapter_002_src_endofpacket),                //          .endofpacket
		.sink0_ready           (width_adapter_002_src_ready),                      //          .ready
		.source0_valid         (burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (burst_adapter_source0_data),                       //          .data
		.source0_channel       (burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (31),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (51),
		.PKT_BYTE_CNT_H            (40),
		.PKT_BYTE_CNT_L            (38),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (46),
		.PKT_BURST_SIZE_L          (44),
		.PKT_BURST_TYPE_H          (48),
		.PKT_BURST_TYPE_L          (47),
		.PKT_BURSTWRAP_H           (43),
		.PKT_BURSTWRAP_L           (41),
		.PKT_TRANS_COMPRESSED_READ (32),
		.PKT_TRANS_WRITE           (34),
		.PKT_TRANS_READ            (35),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (70),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (39),
		.OUT_BURSTWRAP_H           (43),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7)
	) burst_adapter_001 (
		.clk                   (clk_1_clk_clk),                                    //       cr0.clk
		.reset                 (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_003_src_valid),                      //     sink0.valid
		.sink0_data            (width_adapter_003_src_data),                       //          .data
		.sink0_channel         (width_adapter_003_src_channel),                    //          .channel
		.sink0_startofpacket   (width_adapter_003_src_startofpacket),              //          .startofpacket
		.sink0_endofpacket     (width_adapter_003_src_endofpacket),                //          .endofpacket
		.sink0_ready           (width_adapter_003_src_ready),                      //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),                  //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),                   //          .data
		.source0_channel       (burst_adapter_001_source0_channel),                //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),            //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)                   //          .ready
	);

	Network_can_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_1_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                            //      sink.ready
		.sink_channel       (addr_router_src_channel),                          //          .channel
		.sink_data          (addr_router_src_data),                             //          .data
		.sink_startofpacket (addr_router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                      //          .endofpacket
		.sink_valid         (addr_router_src_valid),                            //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                        //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                        //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                         //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                      //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                        //      src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                        //          .valid
		.src1_data          (cmd_xbar_demux_src1_data),                         //          .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                      //          .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket)                   //          .endofpacket
	);

	Network_can_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_001 (
		.clk                (clk_1_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),                        //      sink.ready
		.sink_channel       (addr_router_001_src_channel),                      //          .channel
		.sink_data          (addr_router_001_src_data),                         //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),                        //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                    //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                     //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),                    //          .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),                     //          .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),              //          .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),                    //      src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),                    //          .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),                     //          .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),                  //          .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_1_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                           //          .valid
		.src_data            (cmd_xbar_mux_src_data),                            //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (clk_1_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                        //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_cmd_xbar_mux_002 cmd_xbar_mux_002 (
		.clk                 (clk_1_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                        //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_001_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_001_src2_valid),                    //          .valid
		.sink0_channel       (cmd_xbar_demux_001_src2_channel),                  //          .channel
		.sink0_data          (cmd_xbar_demux_001_src2_data),                     //          .data
		.sink0_startofpacket (cmd_xbar_demux_001_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_cmd_xbar_demux rsp_xbar_demux (
		.clk                (clk_1_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                              //      sink.ready
		.sink_channel       (id_router_src_channel),                            //          .channel
		.sink_data          (id_router_src_data),                               //          .data
		.sink_startofpacket (id_router_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                        //          .endofpacket
		.sink_valid         (id_router_src_valid),                              //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                         //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                        //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                         //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)                   //          .endofpacket
	);

	Network_can_mm_interconnect_0_cmd_xbar_demux rsp_xbar_demux_001 (
		.clk                (clk_1_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                          //      sink.ready
		.sink_channel       (width_adapter_src_channel),                        //          .channel
		.sink_data          (width_adapter_src_data),                           //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),                    //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                          //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_rsp_xbar_demux_002 rsp_xbar_demux_002 (
		.clk                (clk_1_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_001_src_ready),                      //      sink.ready
		.sink_channel       (width_adapter_001_src_channel),                    //          .channel
		.sink_data          (width_adapter_001_src_data),                       //          .data
		.sink_startofpacket (width_adapter_001_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (width_adapter_001_src_endofpacket),                //          .endofpacket
		.sink_valid         (width_adapter_001_src_valid),                      //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_1_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                           //          .valid
		.src_data            (rsp_xbar_mux_src_data),                            //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                        //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                      //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                         //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),                  //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)               //          .endofpacket
	);

	Network_can_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_001 (
		.clk                 (clk_1_clk_clk),                                    //       clk.clk
		.reset               (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                        //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                        //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                      //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                         //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),                  //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),              //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),                    //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),                    //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),                  //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),                     //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),            //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (31),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (40),
		.IN_PKT_BYTE_CNT_L             (38),
		.IN_PKT_TRANS_COMPRESSED_READ  (32),
		.IN_PKT_BURSTWRAP_H            (43),
		.IN_PKT_BURSTWRAP_L            (41),
		.IN_PKT_BURST_SIZE_H           (46),
		.IN_PKT_BURST_SIZE_L           (44),
		.IN_PKT_RESPONSE_STATUS_H      (66),
		.IN_PKT_RESPONSE_STATUS_L      (65),
		.IN_PKT_TRANS_EXCLUSIVE        (37),
		.IN_PKT_BURST_TYPE_H           (48),
		.IN_PKT_BURST_TYPE_L           (47),
		.IN_PKT_ORI_BURST_SIZE_L       (67),
		.IN_PKT_ORI_BURST_SIZE_H       (69),
		.IN_ST_DATA_W                  (70),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (clk_1_clk_clk),                                    //       clk.clk
		.reset                (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_001_src_valid),                          //      sink.valid
		.in_channel           (id_router_001_src_channel),                        //          .channel
		.in_startofpacket     (id_router_001_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (id_router_001_src_endofpacket),                    //          .endofpacket
		.in_ready             (id_router_001_src_ready),                          //          .ready
		.in_data              (id_router_001_src_data),                           //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                    //       src.endofpacket
		.out_data             (width_adapter_src_data),                           //          .data
		.out_channel          (width_adapter_src_channel),                        //          .channel
		.out_valid            (width_adapter_src_valid),                          //          .valid
		.out_ready            (width_adapter_src_ready),                          //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                  //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (31),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (40),
		.IN_PKT_BYTE_CNT_L             (38),
		.IN_PKT_TRANS_COMPRESSED_READ  (32),
		.IN_PKT_BURSTWRAP_H            (43),
		.IN_PKT_BURSTWRAP_L            (41),
		.IN_PKT_BURST_SIZE_H           (46),
		.IN_PKT_BURST_SIZE_L           (44),
		.IN_PKT_RESPONSE_STATUS_H      (66),
		.IN_PKT_RESPONSE_STATUS_L      (65),
		.IN_PKT_TRANS_EXCLUSIVE        (37),
		.IN_PKT_BURST_TYPE_H           (48),
		.IN_PKT_BURST_TYPE_L           (47),
		.IN_PKT_ORI_BURST_SIZE_L       (67),
		.IN_PKT_ORI_BURST_SIZE_H       (69),
		.IN_ST_DATA_W                  (70),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (84),
		.OUT_PKT_RESPONSE_STATUS_L     (83),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (85),
		.OUT_PKT_ORI_BURST_SIZE_H      (87),
		.OUT_ST_DATA_W                 (88),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (clk_1_clk_clk),                                    //       clk.clk
		.reset                (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_002_src_valid),                          //      sink.valid
		.in_channel           (id_router_002_src_channel),                        //          .channel
		.in_startofpacket     (id_router_002_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (id_router_002_src_endofpacket),                    //          .endofpacket
		.in_ready             (id_router_002_src_ready),                          //          .ready
		.in_data              (id_router_002_src_data),                           //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                       //          .data
		.out_channel          (width_adapter_001_src_channel),                    //          .channel
		.out_valid            (width_adapter_001_src_valid),                      //          .valid
		.out_ready            (width_adapter_001_src_ready),                      //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (31),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (40),
		.OUT_PKT_BYTE_CNT_L            (38),
		.OUT_PKT_TRANS_COMPRESSED_READ (32),
		.OUT_PKT_BURST_SIZE_H          (46),
		.OUT_PKT_BURST_SIZE_L          (44),
		.OUT_PKT_RESPONSE_STATUS_H     (66),
		.OUT_PKT_RESPONSE_STATUS_L     (65),
		.OUT_PKT_TRANS_EXCLUSIVE       (37),
		.OUT_PKT_BURST_TYPE_H          (48),
		.OUT_PKT_BURST_TYPE_L          (47),
		.OUT_PKT_ORI_BURST_SIZE_L      (67),
		.OUT_PKT_ORI_BURST_SIZE_H      (69),
		.OUT_ST_DATA_W                 (70),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_002 (
		.clk                  (clk_1_clk_clk),                                    //       clk.clk
		.reset                (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_001_src_valid),                       //      sink.valid
		.in_channel           (cmd_xbar_mux_001_src_channel),                     //          .channel
		.in_startofpacket     (cmd_xbar_mux_001_src_startofpacket),               //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_001_src_endofpacket),                 //          .endofpacket
		.in_ready             (cmd_xbar_mux_001_src_ready),                       //          .ready
		.in_data              (cmd_xbar_mux_001_src_data),                        //          .data
		.out_endofpacket      (width_adapter_002_src_endofpacket),                //       src.endofpacket
		.out_data             (width_adapter_002_src_data),                       //          .data
		.out_channel          (width_adapter_002_src_channel),                    //          .channel
		.out_valid            (width_adapter_002_src_valid),                      //          .valid
		.out_ready            (width_adapter_002_src_ready),                      //          .ready
		.out_startofpacket    (width_adapter_002_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (84),
		.IN_PKT_RESPONSE_STATUS_L      (83),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (85),
		.IN_PKT_ORI_BURST_SIZE_H       (87),
		.IN_ST_DATA_W                  (88),
		.OUT_PKT_ADDR_H                (31),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (40),
		.OUT_PKT_BYTE_CNT_L            (38),
		.OUT_PKT_TRANS_COMPRESSED_READ (32),
		.OUT_PKT_BURST_SIZE_H          (46),
		.OUT_PKT_BURST_SIZE_L          (44),
		.OUT_PKT_RESPONSE_STATUS_H     (66),
		.OUT_PKT_RESPONSE_STATUS_L     (65),
		.OUT_PKT_TRANS_EXCLUSIVE       (37),
		.OUT_PKT_BURST_TYPE_H          (48),
		.OUT_PKT_BURST_TYPE_L          (47),
		.OUT_PKT_ORI_BURST_SIZE_L      (67),
		.OUT_PKT_ORI_BURST_SIZE_H      (69),
		.OUT_ST_DATA_W                 (70),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_003 (
		.clk                  (clk_1_clk_clk),                                    //       clk.clk
		.reset                (nios2_qsys_1_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_002_src_valid),                       //      sink.valid
		.in_channel           (cmd_xbar_mux_002_src_channel),                     //          .channel
		.in_startofpacket     (cmd_xbar_mux_002_src_startofpacket),               //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_002_src_endofpacket),                 //          .endofpacket
		.in_ready             (cmd_xbar_mux_002_src_ready),                       //          .ready
		.in_data              (cmd_xbar_mux_002_src_data),                        //          .data
		.out_endofpacket      (width_adapter_003_src_endofpacket),                //       src.endofpacket
		.out_data             (width_adapter_003_src_data),                       //          .data
		.out_channel          (width_adapter_003_src_channel),                    //          .channel
		.out_valid            (width_adapter_003_src_valid),                      //          .valid
		.out_ready            (width_adapter_003_src_ready),                      //          .ready
		.out_startofpacket    (width_adapter_003_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

endmodule
